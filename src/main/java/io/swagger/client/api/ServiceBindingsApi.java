/*
 * Open Service Broker API
 * The Open Service Broker API defines an HTTP(S) interface between Platforms and Service Brokers.
 *
 * OpenAPI spec version: master - might contain changes that are not yet released
 * Contact: open-service-broker-api@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.AsyncOperation;
import io.swagger.client.model.Error;
import io.swagger.client.model.LastOperationResource;
import io.swagger.client.model.ServiceBindingRequest;
import io.swagger.client.model.ServiceBindingResource;
import io.swagger.client.model.ServiceBindingResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceBindingsApi {
    private ApiClient apiClient;

    public ServiceBindingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceBindingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for serviceBindingBinding
     * @param body parameters for the requested service binding (required)
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to create a binding on (required)
     * @param bindingId binding id of binding to create (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceBindingBindingCall(ServiceBindingRequest body, String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v2/service_instances/{instance_id}/service_bindings/{binding_id}"
            .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "binding_id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (acceptsIncomplete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accepts_incomplete", acceptsIncomplete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xBrokerAPIVersion != null)
        localVarHeaderParams.put("X-Broker-API-Version", apiClient.parameterToString(xBrokerAPIVersion));
        if (xBrokerAPIOriginatingIdentity != null)
        localVarHeaderParams.put("X-Broker-API-Originating-Identity", apiClient.parameterToString(xBrokerAPIOriginatingIdentity));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceBindingBindingValidateBeforeCall(ServiceBindingRequest body, String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling serviceBindingBinding(Async)");
        }
        // verify the required parameter 'xBrokerAPIVersion' is set
        if (xBrokerAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xBrokerAPIVersion' when calling serviceBindingBinding(Async)");
        }
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling serviceBindingBinding(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling serviceBindingBinding(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceBindingBindingCall(body, xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, acceptsIncomplete, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * generate a service binding
     * 
     * @param body parameters for the requested service binding (required)
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to create a binding on (required)
     * @param bindingId binding id of binding to create (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @return ServiceBindingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceBindingResponse serviceBindingBinding(ServiceBindingRequest body, String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete) throws ApiException {
        ApiResponse<ServiceBindingResponse> resp = serviceBindingBindingWithHttpInfo(body, xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, acceptsIncomplete);
        return resp.getData();
    }

    /**
     * generate a service binding
     * 
     * @param body parameters for the requested service binding (required)
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to create a binding on (required)
     * @param bindingId binding id of binding to create (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @return ApiResponse&lt;ServiceBindingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceBindingResponse> serviceBindingBindingWithHttpInfo(ServiceBindingRequest body, String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete) throws ApiException {
        com.squareup.okhttp.Call call = serviceBindingBindingValidateBeforeCall(body, xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, acceptsIncomplete, null, null);
        Type localVarReturnType = new TypeToken<ServiceBindingResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * generate a service binding (asynchronously)
     * 
     * @param body parameters for the requested service binding (required)
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to create a binding on (required)
     * @param bindingId binding id of binding to create (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceBindingBindingAsync(ServiceBindingRequest body, String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete, final ApiCallback<ServiceBindingResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceBindingBindingValidateBeforeCall(body, xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, acceptsIncomplete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceBindingResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceBindingGet
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance associated with the binding (required)
     * @param bindingId binding id of binding to fetch (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceBindingGetCall(String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, String serviceId, String planId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/service_instances/{instance_id}/service_bindings/{binding_id}"
            .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "binding_id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service_id", serviceId));
        if (planId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plan_id", planId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xBrokerAPIVersion != null)
        localVarHeaderParams.put("X-Broker-API-Version", apiClient.parameterToString(xBrokerAPIVersion));
        if (xBrokerAPIOriginatingIdentity != null)
        localVarHeaderParams.put("X-Broker-API-Originating-Identity", apiClient.parameterToString(xBrokerAPIOriginatingIdentity));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceBindingGetValidateBeforeCall(String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, String serviceId, String planId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xBrokerAPIVersion' is set
        if (xBrokerAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xBrokerAPIVersion' when calling serviceBindingGet(Async)");
        }
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling serviceBindingGet(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling serviceBindingGet(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceBindingGetCall(xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, serviceId, planId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get a service binding
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance associated with the binding (required)
     * @param bindingId binding id of binding to fetch (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @return ServiceBindingResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServiceBindingResource serviceBindingGet(String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, String serviceId, String planId) throws ApiException {
        ApiResponse<ServiceBindingResource> resp = serviceBindingGetWithHttpInfo(xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, serviceId, planId);
        return resp.getData();
    }

    /**
     * get a service binding
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance associated with the binding (required)
     * @param bindingId binding id of binding to fetch (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @return ApiResponse&lt;ServiceBindingResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServiceBindingResource> serviceBindingGetWithHttpInfo(String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, String serviceId, String planId) throws ApiException {
        com.squareup.okhttp.Call call = serviceBindingGetValidateBeforeCall(xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, serviceId, planId, null, null);
        Type localVarReturnType = new TypeToken<ServiceBindingResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get a service binding (asynchronously)
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance associated with the binding (required)
     * @param bindingId binding id of binding to fetch (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceBindingGetAsync(String xBrokerAPIVersion, String instanceId, String bindingId, String xBrokerAPIOriginatingIdentity, String serviceId, String planId, final ApiCallback<ServiceBindingResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceBindingGetValidateBeforeCall(xBrokerAPIVersion, instanceId, bindingId, xBrokerAPIOriginatingIdentity, serviceId, planId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServiceBindingResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceBindingLastOperationGet
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to find last operation applied to it (required)
     * @param bindingId binding id of service binding to find last operation applied to it (required)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @param operation a provided identifier for the operation (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceBindingLastOperationGetCall(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/service_instances/{instance_id}/service_bindings/{binding_id}/last_operation"
            .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "binding_id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service_id", serviceId));
        if (planId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plan_id", planId));
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xBrokerAPIVersion != null)
        localVarHeaderParams.put("X-Broker-API-Version", apiClient.parameterToString(xBrokerAPIVersion));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceBindingLastOperationGetValidateBeforeCall(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String operation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xBrokerAPIVersion' is set
        if (xBrokerAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xBrokerAPIVersion' when calling serviceBindingLastOperationGet(Async)");
        }
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling serviceBindingLastOperationGet(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling serviceBindingLastOperationGet(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceBindingLastOperationGetCall(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, operation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * get the last requested operation state for service binding
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to find last operation applied to it (required)
     * @param bindingId binding id of service binding to find last operation applied to it (required)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @param operation a provided identifier for the operation (optional)
     * @return LastOperationResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LastOperationResource serviceBindingLastOperationGet(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String operation) throws ApiException {
        ApiResponse<LastOperationResource> resp = serviceBindingLastOperationGetWithHttpInfo(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, operation);
        return resp.getData();
    }

    /**
     * get the last requested operation state for service binding
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to find last operation applied to it (required)
     * @param bindingId binding id of service binding to find last operation applied to it (required)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @param operation a provided identifier for the operation (optional)
     * @return ApiResponse&lt;LastOperationResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LastOperationResource> serviceBindingLastOperationGetWithHttpInfo(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String operation) throws ApiException {
        com.squareup.okhttp.Call call = serviceBindingLastOperationGetValidateBeforeCall(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, operation, null, null);
        Type localVarReturnType = new TypeToken<LastOperationResource>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * get the last requested operation state for service binding (asynchronously)
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId instance id of instance to find last operation applied to it (required)
     * @param bindingId binding id of service binding to find last operation applied to it (required)
     * @param serviceId id of the service associated with the instance (optional)
     * @param planId id of the plan associated with the instance (optional)
     * @param operation a provided identifier for the operation (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceBindingLastOperationGetAsync(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String operation, final ApiCallback<LastOperationResource> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceBindingLastOperationGetValidateBeforeCall(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, operation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LastOperationResource>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for serviceBindingUnbinding
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId id of the instance associated with the binding being deleted (required)
     * @param bindingId id of the binding being deleted (required)
     * @param serviceId id of the service associated with the instance for which a binding is being deleted (required)
     * @param planId id of the plan associated with the instance for which a binding is being deleted (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call serviceBindingUnbindingCall(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v2/service_instances/{instance_id}/service_bindings/{binding_id}"
            .replaceAll("\\{" + "instance_id" + "\\}", apiClient.escapeString(instanceId.toString()))
            .replaceAll("\\{" + "binding_id" + "\\}", apiClient.escapeString(bindingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (serviceId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service_id", serviceId));
        if (planId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("plan_id", planId));
        if (acceptsIncomplete != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("accepts_incomplete", acceptsIncomplete));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xBrokerAPIVersion != null)
        localVarHeaderParams.put("X-Broker-API-Version", apiClient.parameterToString(xBrokerAPIVersion));
        if (xBrokerAPIOriginatingIdentity != null)
        localVarHeaderParams.put("X-Broker-API-Originating-Identity", apiClient.parameterToString(xBrokerAPIOriginatingIdentity));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call serviceBindingUnbindingValidateBeforeCall(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'xBrokerAPIVersion' is set
        if (xBrokerAPIVersion == null) {
            throw new ApiException("Missing the required parameter 'xBrokerAPIVersion' when calling serviceBindingUnbinding(Async)");
        }
        // verify the required parameter 'instanceId' is set
        if (instanceId == null) {
            throw new ApiException("Missing the required parameter 'instanceId' when calling serviceBindingUnbinding(Async)");
        }
        // verify the required parameter 'bindingId' is set
        if (bindingId == null) {
            throw new ApiException("Missing the required parameter 'bindingId' when calling serviceBindingUnbinding(Async)");
        }
        // verify the required parameter 'serviceId' is set
        if (serviceId == null) {
            throw new ApiException("Missing the required parameter 'serviceId' when calling serviceBindingUnbinding(Async)");
        }
        // verify the required parameter 'planId' is set
        if (planId == null) {
            throw new ApiException("Missing the required parameter 'planId' when calling serviceBindingUnbinding(Async)");
        }
        
        com.squareup.okhttp.Call call = serviceBindingUnbindingCall(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, xBrokerAPIOriginatingIdentity, acceptsIncomplete, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * deprovision a service binding
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId id of the instance associated with the binding being deleted (required)
     * @param bindingId id of the binding being deleted (required)
     * @param serviceId id of the service associated with the instance for which a binding is being deleted (required)
     * @param planId id of the plan associated with the instance for which a binding is being deleted (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object serviceBindingUnbinding(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete) throws ApiException {
        ApiResponse<Object> resp = serviceBindingUnbindingWithHttpInfo(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, xBrokerAPIOriginatingIdentity, acceptsIncomplete);
        return resp.getData();
    }

    /**
     * deprovision a service binding
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId id of the instance associated with the binding being deleted (required)
     * @param bindingId id of the binding being deleted (required)
     * @param serviceId id of the service associated with the instance for which a binding is being deleted (required)
     * @param planId id of the plan associated with the instance for which a binding is being deleted (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> serviceBindingUnbindingWithHttpInfo(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete) throws ApiException {
        com.squareup.okhttp.Call call = serviceBindingUnbindingValidateBeforeCall(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, xBrokerAPIOriginatingIdentity, acceptsIncomplete, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * deprovision a service binding (asynchronously)
     * 
     * @param xBrokerAPIVersion version number of the Service Broker API that the Platform will use (required)
     * @param instanceId id of the instance associated with the binding being deleted (required)
     * @param bindingId id of the binding being deleted (required)
     * @param serviceId id of the service associated with the instance for which a binding is being deleted (required)
     * @param planId id of the plan associated with the instance for which a binding is being deleted (required)
     * @param xBrokerAPIOriginatingIdentity identity of the user that initiated the request from the Platform (optional)
     * @param acceptsIncomplete asynchronous operations supported (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call serviceBindingUnbindingAsync(String xBrokerAPIVersion, String instanceId, String bindingId, String serviceId, String planId, String xBrokerAPIOriginatingIdentity, Boolean acceptsIncomplete, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = serviceBindingUnbindingValidateBeforeCall(xBrokerAPIVersion, instanceId, bindingId, serviceId, planId, xBrokerAPIOriginatingIdentity, acceptsIncomplete, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
